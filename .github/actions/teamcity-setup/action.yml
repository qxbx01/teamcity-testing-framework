name: Teamcity Setup

runs:
  using: composite
  steps:
    - name: Set up JDK
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'zulu'

    - name: Install ifconfig
      shell: bash
      run: |
        sudo apt-get update
        sudo apt-get install -y net-tools || echo "Failed to install net-tools, ensure it's installed manually"

    - name: Set up host environment variable
      shell: bash
      run: |
        HOST=$(ifconfig | grep -E "([0-9]{1,3}\.){3}[0-9]{1,3}" | grep -v 127.0.0.1 | awk '{ print $2 }' | cut -f2 -d: | head -n1)
        if [ -z "$HOST" ]; then
          echo "Unable to detect HOST. Ensure the environment allows external network access."
          exit 1
        fi
        echo "HOST=$HOST" >> $GITHUB_ENV

    - name: Set up host config property
      shell: bash
      run: |
        echo "host=${{ env.HOST }}:8111" > src/main/resources/config.properties

    - name: Pull Selenoid browsers
      shell: bash
      run: |
        if [ ! -f "config/browsers.json" ]; then
          echo "browsers.json not found. Skipping browser pulls."
          exit 0
        fi
        for browser in $(awk -F'"' '/"image": "/{print $4}' config/browsers.json); do
          echo "Pulling browser image: $browser"
          docker pull $browser || echo "Failed to pull $browser"
        done

    - name: Run Selenoid
      shell: bash
      run: |
        docker run -d --name selenoid \
          -v /var/run/docker.sock:/var/run/docker.sock \
          -v $(pwd)/config/:/etc/selenoid/:ro \
          -p 4444:4444 \
          aerokube/selenoid:latest-release || echo "Failed to start Selenoid container"

    - name: Run Selenoid UI (optional)
      shell: bash
      run: |
        docker run -d --name selenoid-ui \
          -p 8080:8080 \
          aerokube/selenoid-ui:latest-release \
          --selenoid-uri http://${{ env.HOST }}:4444 || echo "Failed to start Selenoid UI"

    - name: Run TeamCity Server
      shell: bash
      run: |
        mkdir -p tmp/teamcity_server/datadir tmp/teamcity_server/logs
        docker run -u 0 -d --name teamcity-server \
          -v $(pwd)/tmp/teamcity_server/datadir:/data/teamcity_server/datadir \
          -v $(pwd)/tmp/teamcity_server/logs:/opt/teamcity/logs \
          -p 8111:8111 \
          jetbrains/teamcity-server:2023.11.1 || echo "Failed to start TeamCity Server"

    - name: Cat config.properties
      shell: bash
      run: |
        if [ -f src/main/resources/config.properties ]; then
          cat src/main/resources/config.properties
        else
          echo "config.properties file not found!"
        fi

    - name: Setup TeamCity server
      shell: bash
      run: |
        ./mvnw clean test -Dtest=SetupServerTest#setupTeamCityServerTest || echo "Failed to setup TeamCity Server"

    - name: Setup superUserToken environment variable
      shell: bash
      run: |
        SUPER_USER_TOKEN=$(docker logs teamcity-server | grep 'Super user authentication token' | tail -n 1 | awk '{print $6}')
        if [ -z "$SUPER_USER_TOKEN" ]; then
          echo "Failed to retrieve Super User Token. Check TeamCity Server logs."
          exit 1
        fi
        echo "SUPER_USER_TOKEN=$SUPER_USER_TOKEN" >> $GITHUB_ENV

    - name: Set up superUserToken config property
      shell: bash
      run: |
        if [ -z "${{ env.SUPER_USER_TOKEN }}" ]; then
          echo "Super User Token is empty. Skipping update to config.properties."
          exit 1
        fi
        echo "superUserToken=${{ env.SUPER_USER_TOKEN }}" >> src/main/resources/config.properties
